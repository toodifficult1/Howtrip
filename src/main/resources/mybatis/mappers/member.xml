<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.member">
	<resultMap id="memResult" type="memberVO">
		<result property="userId" column="user_id" />
        <result property="userPw" column="user_pw" />
        <result property="name" column="name" />
        <result property="birth" column="birth" />
        <result property="gender" column="gender" />
        <result property="email" column="email" />        
        <result property="tel" column="tel" />
	</resultMap> 
	<!-- 
	<resultMap id="memResult" type="java.util.HashMap">
      <result property="id" column="id" />
      <result property="pwd" column="pwd" />
      <result property="name" column="name" />
      <result property="email" column="email" />
      <result property="joinDate" column="joinDate" />
   </resultMap> -->

    
    <!-- 회원가입 -->
    <insert id="insertMember"  parameterType="memberVO">
		<![CDATA[
		 insert into member(user_id, user_pw, name, birth, gender, email, tel)
		 values(#{userId}, #{userPw}, #{name}, #{birth}, #{gender}, #{email}, #{tel})
		]]>      
	</insert>
	
	<select id = "idCheck" resultType = "int">
		<![CDATA[
			select count(*) from member
			where user_id = #{userId}	
		]]>
	</select>
   
   
   <!-- 회원 정보 수정 -->
   <update id="updateMember"  parameterType="memberVO">
     <![CDATA[
	     update member
	     set user_pw=#{userPw}, email=#{email}, tel=#{tel}
	     where
	     user_id=#{userId}
      ]]>      
   </update> 
    
   <!-- 회원 정보 삭제 -->
   <delete id="deleteMember"  parameterType="String">
	<![CDATA[
	   delete from member
	   where
	   user_id=#{userId}
	]]>      
  </delete>
  
  <!-- 로그인 기능 -->
   <select id = "loginById" resultType = "memberVO" parameterType = "memberVO">
   <![CDATA[
      select * from member   
      where user_id = #{userId} and user_pw = #{userPw}      
   ]]>
   </select>
	
	
	<!-- 동적 SQL문 -->
  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
      <![CDATA[
          select * from member
      ]]>
      <where>
         <if test=" name != ''  and  name != null">
            name=#{name}
         </if>
         <if test="email != ''  and email != null ">
           and email = #{email}
         </if>
      </where>
      order by joinDate desc
  </select>
  
 <!--  
   <sql id="a">
    <![CDATA[
      select * from t_member
     ]]> 
   </sql>  -->  
  
<!--    
  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
	     <include refid="a" /> 
	   <![CDATA[
         select * from t_member 
      ]]>
	  
       <where>
		  <choose>
		      <when test="name != '' and name != null and  email != '' and email != null">
			     name=#{name} and email=#{email}
		      </when>
		      <when test="name != '' and name != null">
			     name = #{name}
		      </when>
		      <when test="email !='' and email != null">
			    email = #{email}
		      </when>
	      </choose>
       </where>
       order by joinDate desc
   </select> -->
   
   <select id="foreachSelect" resultMap="memResult" parameterType="java.util.Map">
      <!-- <include refid="a" /> -->
      <![CDATA[
        select * from member 
          
      ]]>
      
      where name in
      <foreach item="item" collection="list" open="(" separator="," close=")" >
         #{item}
      </foreach>
      order by joinDate desc
   </select>
   
   <insert id="foreachInsert"  parameterType="java.util.Map">
      <foreach item="item"  collection="list"   open="INSERT ALL" separator=" " close="SELECT * FROM DUAL" >
          INTO  t_member(id, pwd, name, email)
          VALUES  (#{item.id},
                    #{item.pwd},
                    #{item.name},
                    #{item.email})
      </foreach>
   </insert>
   
   <!--  like 검색 -->
   <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%' || #{name} || '%'		
      ]]>
    </select>
    
    
</mapper>